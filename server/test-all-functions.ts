import { storage } from './fabric-only-storage-new';

// Test all storage functions to ensure they work correctly
async function testAllFunctions() {
  console.log('üöÄ Testando todas as fun√ß√µes do sistema OKR...');
  
  try {
    // Test 1: User Management
    console.log('\nüë§ 1. Testando gest√£o de usu√°rios...');
    try {
      const users = await storage.getUser(1);
      console.log('‚úÖ getUser funcionando:', users ? 'Usu√°rio encontrado' : 'Usu√°rio n√£o encontrado');
    } catch (error) {
      console.log('‚ùå getUser falhou:', error.message);
    }
    
    // Test 2: Reference Data
    console.log('\nüóÇÔ∏è 2. Testando dados de refer√™ncia...');
    try {
      const regions = await storage.getRegions();
      console.log('‚úÖ getRegions funcionando:', regions.length, 'regi√µes');
      
      const solutions = await storage.getSolutions();
      console.log('‚úÖ getSolutions funcionando:', solutions.length, 'solu√ß√µes');
      
      const indicators = await storage.getStrategicIndicators();
      console.log('‚úÖ getStrategicIndicators funcionando:', indicators.length, 'indicadores');
    } catch (error) {
      console.log('‚ùå Dados de refer√™ncia falharam:', error.message);
    }
    
    // Test 3: Objectives
    console.log('\nüéØ 3. Testando objetivos...');
    try {
      const objectives = await storage.getObjectives();
      console.log('‚úÖ getObjectives funcionando:', objectives.length, 'objetivos');
      
      if (objectives.length > 0) {
        const firstObjective = await storage.getObjective(objectives[0].id);
        console.log('‚úÖ getObjective funcionando:', firstObjective ? 'Objetivo encontrado' : 'Objetivo n√£o encontrado');
      }
    } catch (error) {
      console.log('‚ùå Objetivos falharam:', error.message);
    }
    
    // Test 4: Key Results
    console.log('\nüîë 4. Testando resultados-chave...');
    try {
      const keyResults = await storage.getKeyResults();
      console.log('‚úÖ getKeyResults funcionando:', keyResults.length, 'resultados-chave');
      
      if (keyResults.length > 0) {
        const firstKR = await storage.getKeyResult(keyResults[0].id);
        console.log('‚úÖ getKeyResult funcionando:', firstKR ? 'KR encontrado' : 'KR n√£o encontrado');
      }
    } catch (error) {
      console.log('‚ùå Key Results falharam:', error.message);
    }
    
    // Test 5: Actions
    console.log('\n‚ö° 5. Testando a√ß√µes...');
    try {
      const actions = await storage.getActions();
      console.log('‚úÖ getActions funcionando:', actions.length, 'a√ß√µes');
      
      if (actions.length > 0) {
        const firstAction = await storage.getAction(actions[0].id);
        console.log('‚úÖ getAction funcionando:', firstAction ? 'A√ß√£o encontrada' : 'A√ß√£o n√£o encontrada');
      }
    } catch (error) {
      console.log('‚ùå Actions falharam:', error.message);
    }
    
    // Test 6: Checkpoints
    console.log('\nüìä 6. Testando checkpoints...');
    try {
      const checkpoints = await storage.getCheckpoints();
      console.log('‚úÖ getCheckpoints funcionando:', checkpoints.length, 'checkpoints');
      
      if (checkpoints.length > 0) {
        const firstCheckpoint = await storage.getCheckpoint(checkpoints[0].id);
        console.log('‚úÖ getCheckpoint funcionando:', firstCheckpoint ? 'Checkpoint encontrado' : 'Checkpoint n√£o encontrado');
      }
    } catch (error) {
      console.log('‚ùå Checkpoints falharam:', error.message);
    }
    
    // Test 7: Activities
    console.log('\nüìù 7. Testando atividades...');
    try {
      const activities = await storage.getRecentActivities(5);
      console.log('‚úÖ getRecentActivities funcionando:', activities.length, 'atividades');
    } catch (error) {
      console.log('‚ùå Activities falharam:', error.message);
    }
    
    // Test 8: Dashboard KPIs
    console.log('\nüìà 8. Testando KPIs do dashboard...');
    try {
      const kpis = await storage.getDashboardKPIs();
      console.log('‚úÖ getDashboardKPIs funcionando:');
      console.log('   - Objetivos:', kpis.totalObjectives);
      console.log('   - Key Results:', kpis.totalKeyResults);
      console.log('   - Progresso m√©dio:', kpis.averageProgress + '%');
      console.log('   - A√ß√µes:', kpis.totalActions);
      console.log('   - Progresso geral:', kpis.overallProgress + '%');
    } catch (error) {
      console.log('‚ùå Dashboard KPIs falharam:', error.message);
    }
    
    console.log('\nüéâ Teste de todas as fun√ß√µes conclu√≠do!');
    console.log('‚úÖ Sistema OKR funcionando corretamente com', 
      storage.fabricConnected ? 'Microsoft Fabric' : 'SQLite');
    
  } catch (error) {
    console.error('üí• Erro geral no teste:', error);
  }
}

testAllFunctions();