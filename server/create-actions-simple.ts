import { storage } from './hybrid-storage';

async function createActionsSimple() {
  console.log('‚ö° Criando 20 a√ß√µes simples...');
  
  try {
    // Buscar dados existentes
    const keyResults = await storage.getKeyResults();
    const adminUser = await storage.getUserByUsername('admin');
    
    console.log(`Key Results dispon√≠veis: ${keyResults.length}`);
    console.log(`Usu√°rio admin: ${adminUser?.name}`);

    if (keyResults.length === 0 || !adminUser) {
      throw new Error('Dados insuficientes para criar a√ß√µes');
    }

    // Criar 2 a√ß√µes para cada key result (at√© totalizar 20)
    const actionsToCreate = [
      'Desenvolver planejamento estrat√©gico',
      'Implementar sistema de monitoramento',
      'Realizar treinamento da equipe',
      'Definir processos de qualidade',
      'Estabelecer parcerias comerciais',
      'Criar campanhas de marketing',
      'Otimizar processos operacionais',
      'Implementar controles de seguran√ßa',
      'Desenvolver novos produtos',
      'Melhorar atendimento ao cliente',
      'Realizar pesquisa de mercado',
      'Investir em tecnologia',
      'Capacitar recursos humanos',
      'Estabelecer m√©tricas de performance',
      'Criar programa de sustentabilidade',
      'Implementar gest√£o de riscos',
      'Desenvolver cultura organizacional',
      'Melhorar comunica√ß√£o interna',
      'Otimizar gest√£o financeira',
      'Implementar inova√ß√£o tecnol√≥gica'
    ];

    let actionCount = 0;
    
    for (let i = 0; i < keyResults.length && actionCount < 20; i++) {
      const kr = keyResults[i];
      
      // Criar 2 a√ß√µes por key result
      for (let j = 0; j < 2 && actionCount < 20; j++) {
        const actionTitle = actionsToCreate[actionCount];
        const actionData = {
          keyResultId: kr.id,
          title: actionTitle,
          description: `${actionTitle} para o key result: ${kr.title}`,
          number: j + 1,
          strategicIndicatorId: 1, // Simplificado - usar sempre o primeiro indicador
          responsibleId: adminUser.id,
          dueDate: '2025-06-30',
          status: actionCount % 3 === 0 ? 'completed' : (actionCount % 2 === 0 ? 'in_progress' : 'pending'),
          priority: actionCount % 2 === 0 ? 'high' : 'medium'
        };

        try {
          const created = await storage.createAction(actionData);
          console.log(`‚ö° A√ß√£o ${actionCount + 1}: ${created.title}`);
          actionCount++;
        } catch (error) {
          console.log(`‚ö†Ô∏è Erro na a√ß√£o ${actionCount + 1}: ${error.message}`);
          // Tentar uma vers√£o simplificada
          const simpleAction = {
            keyResultId: kr.id,
            title: actionTitle,
            description: `A√ß√£o relacionada ao KR ${kr.id}`,
            number: j + 1,
            responsibleId: adminUser.id,
            dueDate: '2025-06-30',
            status: 'pending',
            priority: 'medium'
          };
          
          try {
            const created = await storage.createAction(simpleAction);
            console.log(`‚ö° A√ß√£o ${actionCount + 1} (simplificada): ${created.title}`);
            actionCount++;
          } catch (error2) {
            console.log(`‚ùå Falha total na a√ß√£o ${actionCount + 1}: ${error2.message}`);
          }
        }
      }
    }

    console.log(`\nüéâ Total de a√ß√µes criadas: ${actionCount}`);
    
    return actionCount;

  } catch (error) {
    console.error('‚ùå Erro ao criar a√ß√µes:', error);
    throw error;
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  createActionsSimple()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error(error);
      process.exit(1);
    });
}

export { createActionsSimple };