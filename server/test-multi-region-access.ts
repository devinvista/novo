import { storage } from './storage.js';

/**
 * Script para testar o sistema de controle de acesso multi-regional
 */
async function testMultiRegionAccess() {
  console.log('üß™ Testando sistema de controle de acesso multi-regional...');
  
  try {
    // Criar usu√°rio de teste com m√∫ltiplas regi√µes
    console.log('\nüìù Criando usu√°rio de teste com m√∫ltiplas regi√µes...');
    const testUser = await storage.createUser({
      username: 'teste.multiregional',
      password: 'hash_teste',
      name: 'Usu√°rio Multi-Regional',
      email: 'teste@multiregional.com',
      role: 'gestor',
      regionIds: [23, 24], // Central e Serra
      subRegionIds: [22, 23, 24], // M√∫ltiplas sub-regi√µes
      approved: true,
      active: true,
    });
    
    console.log(`‚úÖ Usu√°rio criado com ID: ${testUser.id}`);
    console.log(`üìç Regi√µes: ${JSON.stringify(testUser.regionIds)}`);
    console.log(`üèòÔ∏è Sub-regi√µes: ${JSON.stringify(testUser.subRegionIds)}`);
    
    // Testar acesso a diferentes regi√µes
    console.log('\nüîç Testando verifica√ß√µes de acesso...');
    
    // Teste 1: Acesso √† regi√£o permitida
    const access1 = await storage.checkUserAccess(testUser.id, 23); // Central
    console.log(`‚úÖ Acesso √† regi√£o 23 (Central): ${access1 ? 'PERMITIDO' : 'NEGADO'}`);
    
    // Teste 2: Acesso √† regi√£o n√£o permitida
    const access2 = await storage.checkUserAccess(testUser.id, 25); // Regi√£o n√£o atribu√≠da
    console.log(`‚ùå Acesso √† regi√£o 25: ${access2 ? 'PERMITIDO' : 'NEGADO'}`);
    
    // Teste 3: Acesso √† sub-regi√£o permitida
    const access3 = await storage.checkUserAccess(testUser.id, undefined, 22);
    console.log(`‚úÖ Acesso √† sub-regi√£o 22: ${access3 ? 'PERMITIDO' : 'NEGADO'}`);
    
    // Teste 4: Acesso √† sub-regi√£o n√£o permitida
    const access4 = await storage.checkUserAccess(testUser.id, undefined, 30);
    console.log(`‚ùå Acesso √† sub-regi√£o 30: ${access4 ? 'PERMITIDO' : 'NEGADO'}`);
    
    // Teste 5: Buscar objetivos com filtro regional
    console.log('\nüéØ Testando filtros de objetivos...');
    const objectives = await storage.getObjectives({
      currentUserId: testUser.id
    });
    console.log(`üìä Objetivos vis√≠veis para o usu√°rio: ${objectives.length}`);
    
    // Criar admin para teste
    console.log('\nüëë Testando acesso de administrador...');
    const adminUser = await storage.createUser({
      username: 'admin.teste',
      password: 'hash_admin',
      name: 'Admin Teste',
      email: 'admin@teste.com',
      role: 'admin',
      regionIds: [],
      subRegionIds: [],
      approved: true,
      active: true,
    });
    
    const adminAccess = await storage.checkUserAccess(adminUser.id, 99, 99);
    console.log(`‚úÖ Acesso admin a qualquer regi√£o: ${adminAccess ? 'PERMITIDO' : 'NEGADO'}`);
    
    console.log('\nüéâ Testes de controle de acesso multi-regional conclu√≠dos!');
    console.log('üìã Resultados esperados:');
    console.log('   ‚úÖ Usu√°rio multi-regional: acesso apenas √†s suas regi√µes/sub-regi√µes');
    console.log('   ‚úÖ Admin: acesso total a todas as regi√µes');
    console.log('   ‚úÖ Filtros autom√°ticos aplicados nas consultas');
    
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
    throw error;
  }
}

// Executar testes se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  testMultiRegionAccess()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('‚ùå Falha nos testes:', error);
      process.exit(1);
    });
}

export { testMultiRegionAccess };